class LibraryItem:
    def __init__(self, title, author, category, item_type):
        self.title = title
        self.author = author
        self.category = category
        self.item_type = item_type
        self.is_checked_out = False
        self.due_date = None

    def __str__(self):
        return f"{self.item_type}: {self.title} by {self.author} (Category: {self.category})" + \
               (" [Checked Out]" if self.is_checked_out else "")


class Library:
    def __init__(self):
        self.items = []
        self.overdue_fines_per_day = 1.0  # Fine amount per day

    def add_item(self, title, author, category, item_type):
        new_item = LibraryItem(title, author, category, item_type)
        self.items.append(new_item)
        print(f"Added {item_type}: {title} by {author} to the library.")

    def checkout_item(self, title):
        for item in self.items:
            if item.title == title and not item.is_checked_out:
                item.is_checked_out = True
                item.due_date = "2025-01-15"  # Placeholder date for example
                print(f"Checked out {item.title}. Due date: {item.due_date}.")
                return
        print(f"Item '{title}' is not available for checkout.")

    def return_item(self, title):
        for item in self.items:
            if item.title == title and item.is_checked_out:
                item.is_checked_out = False
                overdue_days = 5  # Placeholder for example; calculate based on date
                fine = overdue_days * self.overdue_fines_per_day
                print(f"Returned {item.title}. Overdue fine: ${fine:.2f}.")
                return
        print(f"Item '{title}' is not checked out.")

    def search_items(self, query, search_by="title"):
        results = []
        for item in self.items:
            if search_by == "title" and query.lower() in item.title.lower():
                results.append(item)
            elif search_by == "author" and query.lower() in item.author.lower():
                results.append(item)
            elif search_by == "category" and query.lower() in item.category.lower():
                results.append(item)
        if results:
            print("Search results:")
            for result in results:
                print(result)
        else:
            print(f"No items found for {search_by}: '{query}'.")


def main():
    library = Library()

    while True:
        print("\nLibrary Management System")
        print("1. Add Item")
        print("2. Checkout Item")
        print("3. Return Item")
        print("4. Search Items")
        print("5. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            title = input("Enter title: ")
            author = input("Enter author: ")
            category = input("Enter category: ")
            item_type = input("Enter item type (Book/Magazine/DVD): ")
            library.add_item(title, author, category, item_type)

        elif choice == "2":
            title = input("Enter title of the item to checkout: ")
            library.checkout_item(title)

        elif choice == "3":
            title = input("Enter title of the item to return: ")
            library.return_item(title)

        elif choice == "4":
            query = input("Enter search query: ")
            search_by = input("Search by (title/author/category): ")
            library.search_items(query, search_by)

        elif choice == "5":
            print("Exiting the system. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
